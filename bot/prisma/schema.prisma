generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Character {
  eveId              BigInt          @id @map("eve_id")
  name               String
  allianceId         Int?            @map("alliance_id")
  allianceTicker     String?         @map("alliance_ticker")
  corporationId      Int             @map("corporation_id")
  corporationTicker  String          @map("corporation_ticker")
  characterGroupId   String?         @map("character_group_id")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  groupMainCharacter CharacterGroup? @relation("GroupMainCharacter")
  characterGroup     CharacterGroup? @relation("GroupCharacters", fields: [characterGroupId], references: [id])

  // Relationships
  losses            LossFact[]
  mapActivity       MapActivity[]

  @@index([characterGroupId])
  @@index([corporationId])
  @@index([allianceId])
  @@map("characters")
}

model CharacterGroup {
  id              String      @id @default(uuid())
  mapName         String      @map("map_name")
  mainCharacterId BigInt?     @unique @map("main_character_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  mainCharacter   Character?  @relation("GroupMainCharacter", fields: [mainCharacterId], references: [eveId])
  characters      Character[] @relation("GroupCharacters")

  @@index([mapName])
  @@map("character_groups")
}

model MapActivity {
  characterId   BigInt   @map("character_id")
  timestamp     DateTime
  signatures    Int
  connections   Int
  passages      Int
  allianceId    Int?     @map("alliance_id")
  corporationId Int      @map("corporation_id")
  character     Character @relation(fields: [characterId], references: [eveId])

  @@id([characterId, timestamp])
  @@index([characterId, timestamp])
  @@index([corporationId, timestamp])
  @@map("map_activities")
}

model KillFact {
  killmailId      BigInt         @id @map("killmail_id")
  killTime        DateTime       @map("kill_time")
  npc             Boolean
  solo            Boolean
  awox            Boolean
  shipTypeId      Int            @map("ship_type_id")
  systemId        Int            @map("system_id")
  labels          String[]
  totalValue      BigInt         @map("total_value")
  points          Int
  attackers       KillAttacker[]
  victims         KillVictim[]
  characters      KillCharacter[]

  @@index([killTime])
  @@map("KillFact")
}

model LossFact {
  killmailId     BigInt   @id @map("killmail_id")
  characterId    BigInt   @map("character_id")
  killTime       DateTime @map("kill_time")
  shipTypeId     Int      @map("ship_type_id")
  systemId       Int      @map("system_id")
  totalValue     BigInt   @map("total_value")
  attackerCount  Int      @map("attacker_count")
  labels         String[]
  character      Character @relation(fields: [characterId], references: [eveId])

  @@index([characterId, killTime])
  @@map("LossFact")
}

model KillAttacker {
  id              Int      @id @default(autoincrement())
  killmailId      BigInt   @map("killmail_id")
  characterId     BigInt?  @map("character_id")
  corporationId   BigInt?  @map("corporation_id")
  allianceId      BigInt?  @map("alliance_id")
  damageDone      Int      @map("damage_done")
  finalBlow       Boolean  @map("final_blow")
  securityStatus  Float?   @map("security_status")
  shipTypeId      Int?     @map("ship_type_id")
  weaponTypeId    Int?     @map("weapon_type_id")
  createdAt       DateTime @default(now()) @map("created_at")
  kill            KillFact @relation(fields: [killmailId], references: [killmailId], onDelete: Cascade)

  @@index([killmailId])
  @@index([characterId])
  @@index([characterId, killmailId])
  @@map("KillAttacker")
}

model KillVictim {
  id             Int      @id @default(autoincrement())
  killmailId     BigInt   @map("killmail_id")
  characterId    BigInt?  @map("character_id")
  corporationId  BigInt?  @map("corporation_id")
  allianceId     BigInt?  @map("alliance_id")
  shipTypeId     Int      @map("ship_type_id")
  damageTaken    Int      @map("damage_taken")
  createdAt      DateTime @default(now()) @map("created_at")
  kill           KillFact @relation(fields: [killmailId], references: [killmailId], onDelete: Cascade)

  @@index([killmailId])
  @@index([characterId])
  @@index([characterId, killmailId])
  @@map("KillVictim")
}

model KillCharacter {
  killmailId    BigInt   @map("killmail_id")
  characterId   BigInt   @map("character_id")
  role          String   // "attacker" or "victim"

  // Relationships
  kill          KillFact @relation(fields: [killmailId], references: [killmailId], onDelete: Cascade)

  @@id([killmailId, characterId])
  @@index([characterId])
  @@map("kill_characters")
}