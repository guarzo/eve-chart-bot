generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Tracks the ingestion checkpoint for each stream (e.g. RedisQ)
model IngestionCheckpoint {
  streamName   String   @id
  lastSeenId   BigInt
  lastSeenTime DateTime

  @@map("ingestion_checkpoints")
}

model Character {
  eveId              BigInt          @id @map("eve_id")
  name               String
  allianceId         Int?            @map("alliance_id")
  allianceTicker     String?         @map("alliance_ticker")
  corporationId      Int             @map("corporation_id")
  corporationTicker  String          @map("corporation_ticker")
  characterGroupId   String?         @map("character_group_id")
  lastBackfillAt     DateTime?       @map("last_backfill_at")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  groupMainCharacter CharacterGroup? @relation("GroupMainCharacter")
  characterGroup     CharacterGroup? @relation("GroupCharacters", fields: [characterGroupId], references: [id])

  // Relationships
  losses            LossFact[]
  mapActivity       MapActivity[]

  @@index([characterGroupId])
  @@index([corporationId])
  @@index([allianceId])
  @@map("characters")
}

model CharacterGroup {
  id              String      @id @default(uuid())
  map_name        String      @map("map_name")
  mainCharacterId BigInt?     @unique @map("main_character_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  mainCharacter   Character?  @relation("GroupMainCharacter", fields: [mainCharacterId], references: [eveId])
  characters      Character[] @relation("GroupCharacters")

  @@index([map_name])
  @@map("character_groups")
}

model MapActivity {
  characterId   BigInt   @map("character_id")
  timestamp     DateTime
  signatures    Int
  connections   Int
  passages      Int
  allianceId    Int?     @map("alliance_id")
  corporationId Int      @map("corporation_id")
  character     Character @relation(fields: [characterId], references: [eveId])

  @@id([characterId, timestamp])
  @@index([characterId, timestamp])
  @@index([corporationId, timestamp])
  @@map("map_activities")
}

model KillFact {
  killmail_id  BigInt         @id
  kill_time    DateTime
  npc          Boolean
  solo         Boolean
  awox         Boolean
  ship_type_id Int
  system_id    Int
  labels       String[]
  total_value  BigInt
  points       Int
  attackers    KillAttacker[]
  victims      KillVictim[]
  characters   KillCharacter[]

  @@map("KillFact")
}

model LossFact {
  killmail_id    BigInt   @id
  character_id   BigInt
  kill_time      DateTime
  ship_type_id   Int
  system_id      Int
  total_value    BigInt
  attacker_count Int
  labels         String[]
  character      Character @relation(fields: [character_id], references: [eveId])

  @@index([character_id, kill_time])
  @@map("LossFact")
}

model KillAttacker {
  id              Int      @id @default(autoincrement())
  killmail_id     BigInt
  character_id    BigInt?
  corporation_id  BigInt?
  alliance_id     BigInt?
  damage_done     Int
  final_blow      Boolean
  security_status Float?
  ship_type_id    Int?
  weapon_type_id  Int?
  created_at      DateTime @default(now())
  kill            KillFact @relation(fields: [killmail_id], references: [killmail_id], onDelete: Cascade)

  @@index([killmail_id])
  @@index([character_id])
  @@map("KillAttacker")
}

model KillVictim {
  id             Int      @id @default(autoincrement())
  killmail_id    BigInt
  character_id   BigInt?
  corporation_id BigInt?
  alliance_id    BigInt?
  ship_type_id   Int
  damage_taken   Int
  created_at     DateTime @default(now())
  kill           KillFact @relation(fields: [killmail_id], references: [killmail_id], onDelete: Cascade)

  @@index([killmail_id])
  @@index([character_id])
  @@map("KillVictim")
}

model KillCharacter {
  killmail_id    BigInt
  character_id   BigInt
  role           String   // "attacker" or "victim"

  // Relationships
  kill           KillFact @relation(fields: [killmail_id], references: [killmail_id], onDelete: Cascade)

  @@id([killmail_id, character_id])
  @@index([character_id])
  @@map("kill_characters")
}
